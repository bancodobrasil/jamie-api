# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type MenuMeta {
  id: Int!
  name: String!
  type: String!
  required: Boolean!
  order: Int!
  enabled: Boolean!
  defaultValue: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MenuRevision {
  id: Int!
  menuId: Int!
  description: String!
  snapshot: JSONObject!
  menu: Menu!
  createdAt: DateTime!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MenuItemInitialTemplate implements InitialTemplate {
  json: String!
  xml: String!
  plain: String!
}

interface InitialTemplate {
  json: String!
  xml: String!
  plain: String!
}

type MenuInitialTemplate implements InitialTemplate {
  json: String!
  xml: String!
  plain: String!
}

type KeycloakUser {
  id: ID!
  username: String!
  email: String
  firstName: String
  lastName: String
}

type MenuPendency {
  id: Int!
  menuId: Int!
  submittedBy: KeycloakUser!
  input: JSONObject!
  menu: Menu!
  createdAt: DateTime!
}

type MenuPendencyConnection {
  edges: [MenuPendencyEdge!]
  pageInfo: PageInfo
  totalCount: Int
}

type MenuPendencyEdge {
  cursor: String!
  node: MenuPendency!
}

type Menu {
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  id: Int!
  uuid: ID!
  name: String!
  mustDeferChanges: Boolean!
  meta: [MenuMeta!]
  template: String
  templateFormat: String
  defaultTemplate: MenuInitialTemplate!
  items: [MenuItem!]
  pendencies: [MenuPendency!]
  revisions: [MenuRevision!]
  currentRevision: MenuRevision
  currentRevisionId: Int
  publishedRevision: MenuRevision
  publishedRevisionId: Int
}

type MenuConnection {
  edges: [MenuEdge!]
  pageInfo: PageInfo
  totalCount: Int
}

type MenuEdge {
  cursor: String!
  node: Menu!
}

type MenuItem {
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  id: Int!
  label: String!
  order: Int!
  meta: JSONObject
  children: [MenuItem!]
  parentId: Int
  menu: Menu!
  menuId: Int!
  enabled: Boolean!
  startPublication: DateTime
  endPublication: DateTime
  template: String
  templateFormat: String
  defaultTemplate: MenuItemInitialTemplate!
}

type Query {
  menus(first: Int, after: String, last: Int, before: String, sort: MenuSort, direction: Direction): MenuConnection!
  menu(id: Int!): Menu!
  pendencies(menuId: Int!, first: Int, after: String, last: Int, before: String): MenuPendencyConnection!
  renderMenuTemplate(renderMenuTemplateInput: RenderMenuTemplateInput!): String!
  renderMenuItemTemplate(renderMenuItemTemplateInput: RenderMenuItemTemplateInput!, renderMenuTemplateInput: RenderMenuTemplateInput!): String!
  menuItem(id: Int!, menuId: Int!): MenuItem!
}

enum MenuSort {
  Id
  Name
}

enum Direction {
  ASC
  DESC
}

input RenderMenuTemplateInput {
  name: String!
  template: String
  templateFormat: String
  meta: [MenuMetaInput!]
  items: [RenderMenuItemTemplateInput!]
}

input MenuMetaInput {
  id: Int!
  name: String!
  type: String!
  required: Boolean!
  order: Int!
  enabled: Boolean!
  defaultValue: JSON
}

input RenderMenuItemTemplateInput {
  id: Int!
  label: String!
  order: Int!
  template: String
  templateFormat: String
  meta: JSONObject
  parentId: Int
  children: [RenderMenuItemTemplateInput!]
  enabled: Boolean!
  startPublication: DateTime
  endPublication: DateTime
}

type Mutation {
  createMenu(createMenuInput: CreateMenuInput!): Menu!
  updateMenu(updateMenuInput: UpdateMenuInput!): Menu!
  removeMenu(id: Int!): Boolean!
  approvePendency(id: Int!, menuId: Int!): Menu!
  declinePendency(id: Int!, menuId: Int!): Boolean!
  createRevision(createMenuRevisionInput: CreateMenuRevisionInput!): Menu!
  restoreRevision(menuId: Int!, revisionId: Int!): Menu!
  publishRevision(menuId: Int!, revisionId: Int!): Menu!
}

input CreateMenuInput {
  name: String!
  mustDeferChanges: Boolean
  meta: [CreateMenuMetaInput!]
  items: [CreateMenuItemInput!]
}

input CreateMenuMetaInput {
  name: String!
  type: String!
  required: Boolean!
  order: Int!
  enabled: Boolean!
  defaultValue: JSON
}

input CreateMenuItemInput {
  label: String!
  order: Int!
  meta: JSONObject
  parentId: Int
  children: [CreateMenuItemInput!]
  enabled: Boolean!
  startPublication: DateTime
  endPublication: DateTime
}

input UpdateMenuInput {
  name: String
  mustDeferChanges: Boolean
  id: Int!
  items: [UpdateMenuItemInput!]
  meta: [UpdateMenuMetaInput!]
  template: String
  templateFormat: String
}

input UpdateMenuItemInput {
  label: String
  order: Int
  meta: JSONObject
  parentId: Int
  startPublication: DateTime
  endPublication: DateTime
  action: InputAction!
  id: Int
  children: [UpdateMenuItemInput!]
  enabled: Boolean
  template: String
  templateFormat: String
}

enum InputAction {
  CREATE
  UPDATE
  DELETE
}

input UpdateMenuMetaInput {
  action: InputAction!
  id: Int
  name: String
  type: String
  required: Boolean
  order: Int
  enabled: Boolean
  defaultValue: JSON
}

input CreateMenuRevisionInput {
  menuId: Int!
  description: String!
  setAsCurrent: Boolean!
}